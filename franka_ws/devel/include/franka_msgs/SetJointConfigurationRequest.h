// Generated by gencpp from file franka_msgs/SetJointConfigurationRequest.msg
// DO NOT EDIT!


#ifndef FRANKA_MSGS_MESSAGE_SETJOINTCONFIGURATIONREQUEST_H
#define FRANKA_MSGS_MESSAGE_SETJOINTCONFIGURATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_msgs
{
template <class ContainerAllocator>
struct SetJointConfigurationRequest_
{
  typedef SetJointConfigurationRequest_<ContainerAllocator> Type;

  SetJointConfigurationRequest_()
    : joint_names()
    , joint_positions()  {
    }
  SetJointConfigurationRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)
    , joint_positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_positions_type;
  _joint_positions_type joint_positions;





  typedef boost::shared_ptr< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointConfigurationRequest_

typedef ::franka_msgs::SetJointConfigurationRequest_<std::allocator<void> > SetJointConfigurationRequest;

typedef boost::shared_ptr< ::franka_msgs::SetJointConfigurationRequest > SetJointConfigurationRequestPtr;
typedef boost::shared_ptr< ::franka_msgs::SetJointConfigurationRequest const> SetJointConfigurationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator1> & lhs, const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_names == rhs.joint_names &&
    lhs.joint_positions == rhs.joint_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator1> & lhs, const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d29e22151771f822ae3518ca85c434f5";
  }

  static const char* value(const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd29e22151771f822ULL;
  static const uint64_t static_value2 = 0xae3518ca85c434f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_msgs/SetJointConfigurationRequest";
  }

  static const char* value(const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] joint_names\n"
"float64[] joint_positions\n"
;
  }

  static const char* value(const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
      stream.next(m.joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointConfigurationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_msgs::SetJointConfigurationRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "joint_names: ";
    if (v.joint_names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.joint_names[i]);
    }
    if (v.joint_names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_positions: ";
    if (v.joint_positions.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.joint_positions[i]);
    }
    if (v.joint_positions.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_MSGS_MESSAGE_SETJOINTCONFIGURATIONREQUEST_H
